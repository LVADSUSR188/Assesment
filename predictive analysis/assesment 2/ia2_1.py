# -*- coding: utf-8 -*-
"""IA2_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DpcGdbIeXAZJ258lQHeO1FCaFIWEFeE-
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib_inline

import seaborn as sns
import warnings as wr
wr.filterwarnings('ignore')

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import accuracy_score

df=pd.read_csv(r'/content/winequality-red.csv')

df.head()

df.info()

df.dtypes

df.shape

df.size

df.describe(include='all')

df.isnull().sum()



df=df.fillna(value = df['fixed acidity'].mean())
df=df.fillna(value = df['volatile acidity'].mean())
df=df.fillna(value = df['citric acid'].mean())
df=df.fillna(value = df['residual sugar'].mean())
df=df.fillna(value = df['chlorides'].mean())
df=df.fillna(value = df['sulphates'].mean())

df.duplicated().sum()

duplicated_rows=df[df.duplicated(keep=False)]
print(duplicated_rows)

df.drop_duplicates(inplace=True)

#correlation
numeric_cols=df.select_dtypes(include=['int64','float64'])
correlation_matrix= numeric_cols.corr()
print("Correlation matrix",correlation_matrix)
plt.figure(figsize=(10,8))
sns.heatmap(data=correlation_matrix, annot =True, fmt='.2f', cmap='coolwarm', linewidths= 0.5)
plt.show()

numerical_columns= df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
  for j in range(i + 1, len(numerical_columns)):
    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
    plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
    plt.show()

df['quality'].unique()
df['quality'] = np.where(df['quality'] > 6, 1, 0)
df['quality'].value_counts()

df.dtypes

selected_features = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
                     'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
                     'pH', 'sulphates', 'alcohol']

X=df[selected_features]
y=df['quality']

model=KNeighborsClassifier(n_neighbors = 2)
model.fit(X,y)
y_pred=model.predict(X)
model_predictions = [round(value) for value in y_pred]
accuracy = accuracy_score(y,model_predictions)

print("Accuracy Score is  %.2f%%" % (accuracy * 100.0))
print("\n")