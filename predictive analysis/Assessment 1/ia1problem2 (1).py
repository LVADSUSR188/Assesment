# -*- coding: utf-8 -*-
"""IA1Problem2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HRz-DqdxwSlc09gFe2ZeexnUG8qTWIvu
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

df=pd.read_csv(r'/content/booking.csv')

df.head()

df.head().T

df.shape

df.size

df.info()

df.dtypes

#finding missing values
df.isna().sum()

df['room type'].value_counts()

#changing the missing values with the mode of the room type
df=df.fillna(value=df['room type'].mode()[0])

df.isna().sum()

#outliers

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for column in numerical_columns:
  plt.figure(figsize=(10,6))
  sns.boxplot(x=df[column])
  plt.show()

#encoding categorical data
df=pd.get_dummies(df,columns=['room type','type of meal','booking status'])

df.head(10)

df.dtypes

#duplicates
df.duplicated().sum()

df.dtypes

duplicated_rows = df[df.duplicated(keep=False)]
print(duplicated_rows)

df.drop_duplicates(inplace=True)

df.duplicated().sum()

#correlation for numerical variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)
# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True)
plt.title('Heatmap')
plt.show()

#scatter plot
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
 for j in range(i + 1, len(numerical_columns)):
  plt.figure(figsize=(10, 6))
  sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
  plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
  plt.show()

df.head()

#data labelling
X = df.drop(columns = ["booking status_Not_Canceled"])
y = df["booking status_Not_Canceled"]
#data splitting
X_train,X_test,y_train,y_test= train_test_split(X, y , test_size = 0.3)

X_train.shape

y_train.shape

scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

from sklearn.metrics import accuracy_score,recall_score,confusion_matrix,precision_score,f1_score

model = LogisticRegression()
model.fit(X_train_scaled, y_train)
y_pred = model.predict(X_test_scaled)
conf_mat = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_mat)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label='Yes')
recall = recall_score(y_test, y_pred, pos_label='Yes')
print("\nAccuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)