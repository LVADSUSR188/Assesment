# -*- coding: utf-8 -*-
"""Clustering_FA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MRgbXA4gPtLRhS5zzd0vtjOPBei1a_Bh
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

df = pd.read_csv(r"/content/customer_segmentation (1).csv")

df.head()

df.info()

df.shape

df.size

df.dtypes

df.isnull().sum()

df=df.fillna(value=df['Income'].mean())

df.duplicated().sum()

df.describe(include='all')

for column in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,6))
  sns.boxplot(x=df[column])
  plt.title(f'Boxplot of {column}')
  plt.xlabel(column)
  plt.show()

#handling outliers
for column in df.select_dtypes(include=['int64', 'float64']).columns:
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    df = df[((df[column] < (Q1 - 1.5 * IQR)) | (df[column] > (Q3 + 1.5 * IQR)))]

numeric_cols=df.select_dtypes(include=['int64','float64'])
correlation_matrix= numeric_cols.corr()
print("Correlation matrix",correlation_matrix)
plt.figure(figsize=(10,8))
sns.heatmap(data=correlation_matrix, annot =True, fmt='.2f', cmap='coolwarm', linewidths= 0.5)
plt.show()

df.hist(figsize=(10, 8))
plt.tight_layout()
plt.show()

df.dtypes

from sklearn.preprocessing import LabelEncoder

label_encoder=LabelEncoder()
df['Education']=label_encoder.fit_transform(df['Education'])
df['Marital_Status']=label_encoder.fit_transform(df['Marital_Status'])
df['Dt_Customer']=label_encoder.fit_transform(df['Dt_Customer'])

scaler = StandardScaler()
scaled_data = scaler.fit_transform(df)

inertia_values = []
silhouette_scores = []
k_values = range(2, 10)

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    inertia_values.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(scaled_data, kmeans.labels_))

plt.plot(k_values, inertia_values, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Curve for Optimal k')
plt.xticks(k_values)
plt.show()

plt.plot(k_values, silhouette_scores, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Scores for Optimal k')
plt.xticks(k_values)
plt.show()

optimal_k = 5
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
kmeans.fit(scaled_data)

cluster_labels = kmeans.predict(scaled_data)
silhouette_avg = silhouette_score(scaled_data, cluster_labels)
print("Average silhouette score:", silhouette_avg)

# Cluster analysis
df['Cluster'] = kmeans.labels_
cluster_profiles = df.groupby('Cluster').mean()
print(cluster_profiles)