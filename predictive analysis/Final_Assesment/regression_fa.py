# -*- coding: utf-8 -*-
"""Regression_FA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PdHvJQKB7e_Mqersulp8pMrUYxP3kpWy
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

df=pd.read_csv(r'/content/Fare prediction (1).csv')

df.head()

df.info()

df.isnull().sum()

df.shape

df.size

df.duplicated().sum()

df.describe(include='all')

df.dtypes

for column in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,6))
  sns.boxplot(x=df[column])
  plt.title(f'Boxplot of {column}')
  plt.xlabel(column)
  plt.show()

#handling outliers
for column in df.select_dtypes(include=['int64', 'float64']).columns:
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    df = df[((df[column] < (Q1 - 1.5 * IQR)) | (df[column] > (Q3 + 1.5 * IQR)))]

numeric_cols=df.select_dtypes(include=['int64','float64'])
correlation_matrix= numeric_cols.corr()
print("Correlation matrix",correlation_matrix)
plt.figure(figsize=(10,8))
sns.heatmap(data=correlation_matrix, annot =True, fmt='.2f', cmap='coolwarm', linewidths= 0.5)
plt.show()

df.hist(figsize=(10, 8))
plt.tight_layout()
plt.show()

# Feature scaling
X = df.drop(columns=['key','fare_amount'])
y = df['fare_amount']

df.dtypes

label_encoder=LabelEncoder()
df['key']=label_encoder.fit_transform(df['key'])
df['pickup_datetime']=label_encoder.fit_transform(df['pickup_datetime'])

df.dtypes

scaler = StandardScaler()
scaled_data = scaler.fit_transform(df)

X_train, X_test, y_train, y_test = train_test_split(scaled_data, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)
print(f'Root Mean Squared Error: {rmse}')
print(f'R-squared: {r2}')

plt.scatter(y_test, y_pred, color='green')
plt.xlabel('Actual MPG')
plt.ylabel('Predicted MPG')
plt.title('Actual vs. Predicted MPG')
plt.show()