# -*- coding: utf-8 -*-
"""Classification_FA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p5vruLWCQDEVii2LR5blU8GwINCARoNA
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import recall_score, precision_score,accuracy_score
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier

df=pd.read_csv(r'/content/penguins_classification (1).csv')

df.head()

df.info()

df.shape

df.size

df.dtypes

df.isnull().sum()

df.duplicated().sum()

df.describe(include='all')

for column in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,6))
  sns.boxplot(x=df[column])
  plt.title(f'Boxplot of {column}')
  plt.xlabel(column)
  plt.show()

#handling outliers
for column in df.select_dtypes(include=['int64', 'float64']).columns:
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    df = df[((df[column] < (Q1 - 1.5 * IQR)) | (df[column] > (Q3 + 1.5 * IQR)))]

numeric_cols=df.select_dtypes(include=['int64','float64'])
correlation_matrix= numeric_cols.corr()
print("Correlation matrix",correlation_matrix)
plt.figure(figsize=(10,8))
sns.heatmap(data=correlation_matrix, annot =True, fmt='.2f', cmap='coolwarm', linewidths= 0.5)
plt.show()

df.hist(figsize=(10, 8))
plt.tight_layout()
plt.show()

label_encoder=LabelEncoder()
df['species']=label_encoder.fit_transform(df['species'])
df['island']=label_encoder.fit_transform(df['island'])

df.head()

for column in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(8,5))
  sns.boxplot(x=df[column])
  plt.title(f'Boxplot of {column}')
  plt.xlabel(column)
  plt.show()

print(df.corr())
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(),cmap="viridis",annot=True)
plt.show()

X=df.iloc[:,:-1]
X.fillna(X.mean(),inplace=True)
Y=df.iloc[:,-1]

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=42)

model1=DecisionTreeClassifier()
model1.fit(X_train,Y_train)
pred1=model1.predict(X_test)
acc1=accuracy_score(pred1,Y_test)
print(acc1)
precision1=precision_score(pred1,Y_test,average='weighted')
print(precision1)
recall1=recall_score(pred1,Y_test,average="weighted")
print(recall1)

from sklearn.ensemble import RandomForestClassifier

model2=RandomForestClassifier()
model2.fit(X_train,Y_train)
pred2=model2.predict(X_test)
acc2=accuracy_score(pred2,Y_test)
print(acc2)
precision2=precision_score(pred2,Y_test,average='weighted')
print(precision2)
recall2=recall_score(pred2,Y_test,average="weighted")
print(recall2)